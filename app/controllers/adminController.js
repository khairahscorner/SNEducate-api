const jwt = require('jsonwebtoken');
const User = require('../models/user');
const School_Admin = require('../models/school_admin');
const School = require('../models/school');

const { generateRandomPassword } = require('../middleware/auth');
const { sendActivationEmail } = require('../../config/mail');

const createNewAdmin = async (req, res) => {
    const { email, firstName, lastName, role, schoolId } = req.body;
    const autogeneratedPassword = generateRandomPassword();

    try {
        const adminSchool = await School.findOne({
            where: {
                school_id: schoolId
            }
        });
        if (!adminSchool) {
            return res.status(400).json({
                message: `Cannot create admin if the school does not exist`,
                data: {
                    ...req.body
                }
            });
        }

        //sequelize not enforcing strict 1-to-1 rel hence need to put check
        const adminExists = await adminSchool.getSchool_Admin();
        if (adminExists) {
            return res.status(400).json({
                message: `School already has an an admin`
            });
        }
        const newUser = await User.create({
            email: email.toLowerCase(),
            password: autogeneratedPassword,
            user_type: "school_admin"
        });

        if (newUser) {
            await newUser.createSchool_Admin({
                first_name: firstName,
                last_name: lastName,
                role,
                admin_id: newUser.dataValues.id,
                school_id: schoolId
            });
            const newAdmin = await newUser.getSchool_Admin();

            if (newAdmin) {
                let token = await generateActivationToken({
                    userId: newUser.dataValues.id,
                    userType: newUser.dataValues.user_type,
                    isVerified: newUser.dataValues.isVerified
                });

                let mailOptions = {
                    userType: newUser.user_type === "staff" ? "staff" : "school administrator",
                    activationLink: `${process.env.BASE_FRONTEND_URL}/verify/${token}`,
                    email,
                    password: autogeneratedPassword,
                    schoolName: adminSchool.name
                };
                if (token) {
                    await sendActivationEmail(mailOptions);
                    return res.status(200).json({
                        message: "School admin created successfully & email sent",
                        data: {
                            ...newAdmin.dataValues,
                            activationLink: mailOptions.activationLink
                        },
                    });
                }
            }
        }
    } catch (error) {
        return res.status(500).json({ message: "Internal Server error", error });
    }
};

const getAdminDetails = async (req, res) => {
    const { userId } = req.user;

    try {
        const currAdmin = await School_Admin.findOne({
            where: {
                admin_id: userId
            }
        });
        if (!currAdmin) {
            return res.status(400).json({
                message: `Cannot fetch admin profile`,
                data: {
                    admin_id: userId
                }
            });
        }
        return res.status(200).json({
            message: "Successfully fetched profile",
            data: {
                ...currAdmin.dataValues
            },
        });
    } catch (error) {
        return res.status(500).json({ message: "Internal Server error", error });
    }
}

const getSingleAdmin = async (req, res) => {
    const adminId = req.params.id;

    try {
        const admin = await School_Admin.findOne({
            where: {
                admin_id: adminId
            }
        });
        if (!admin) {
            return res.status(400).json({
                message: `Cannot get admin details`,
                data: {
                    adminId
                }
            });
        }

        return res.status(200).json({
            message: "Request successful",
            data: {
                ...admin.dataValues
            },
        });
    } catch (error) {
        return res.status(500).json({ message: "Internal Server error", error });
    }
}

const getAllAdmins = async (req, res) => {
    try {
        const allAdmins = await School_Admin.findAll();
        if (!allAdmins) {
            return res.status(400).json({
                message: `Cannot fetch admins`,
            });
        }

        return res.status(200).json({
            message: "Request successful",
            data: {
                count: allAdmins.length,
                admins: allAdmins
            },
        });
    } catch (error) {
        return res.status(500).json({ message: "Internal Server error", error });
    }
}

const updateAdmin = async (req, res) => {
    const adminId = req.params.adminId;

    try {
        const admin = await School_Admin.findByPk(adminId);
        if (!admin) {
            return res.status(400).json({
                message: `Cannot update admin that does not exist`,
                data: {
                    adminId,
                    ...req.body
                }
            });
        }

        admin.update(req.body, {
            returning: true
        }).then((result) => {
            return res.status(200).json({
                message: "School Admin details updated successfully",
                data: result.dataValues
            });
        })
            .catch(() => {
                return res.status(400).json({
                    message: "Could not update staadminff details",
                    data: {
                        adminId: admin.dataValues.admin_id,
                        ...req.body
                    }
                })
            })
    } catch (error) {
        return res.status(500).send({ message: "Internal server error", error });
    }
};

const deleteAdmin = async (req, res) => {
    const id = req.params.adminId;
    try {
        const admin = await School_Admin.findOne({
            where: {
                admin_id: id
            }
        });
        if (!admin) {
            return res.status(400).json({
                message: `Cannot delete admin that does not exist`,
                data: {
                    adminId: id
                }
            });
        }

        const result = await User.destroy({
            where: {
                id
            }
        })
        if (result > 0) {
            return res.json({
                message: "Successfully deleted school admin",
                data: {
                    ...admin.dataValues
                }
            });
        }
    } catch (error) {
        return res.status(500).send({ message: "Internal server error", error });
    }
}

// const sendMail = async (req, res) => {
//     try {
//         console.log(`${process.env.BASE_FRONTEND_URL}/verify/qwweeee`);
//         let mailOptions = {
//             userType: "asdd",
//             activationLink: `${process.env.BASE_FRONTEND_URL}/verify/qwweeee`,
//             email: "khairahscorner@gmail.com",
//             password: "autogeneratedPassword",
//             schoolName: "adminSchool.name"
//         };
//         sendActivationEmail(mailOptions);
//         return res.status(200).json({
//             message: "success",
//         });

//     } catch (error) {
//         return res.status(500).send({ message: error });
//     }
// };

const generateActivationToken = async ({ userId, userType, isVerified }) => {
    return jwt.sign(
        { userId, userType, isVerified },
        process.env.JWT_SECRET_KEY,
        // { // no expiration
        //     expiresIn: "24h",
        // }
    );
}

module.exports = {
    createNewAdmin,
    getAdminDetails,
    getSingleAdmin,
    getAllAdmins,
    updateAdmin,
    deleteAdmin
};