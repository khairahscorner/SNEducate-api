const User = require('../models/user');

const register = async (req, res) => {
    const { email, password } = req.body;
    try {
        const user = await User.findOne({
            where: {
                email: email.toLowerCase()
            }
        });

        if (user) {
            return res.status(400).json({
                message: `User already exists`,
                data: email
            });
        }

        const newUser = await User.create({
            email: email.toLowerCase(),
            user_type: req.body.user_type ? req.body.user_type : "dev",
            password
        });

        // after success, send email with verify/change autogenerated password 

        if (newUser) {
            let token = await newUser.generateToken();

            return res.status(200).json({
                message: "User created successfully",
                data: {
                    ...newUser.dataValues,
                    token
                }
            });
        }
    } catch (error) {
        console.log(error)
        return res.status(500).send({ message: "Internal server error", error });
    }
};

const login = async (req, res) => {
    const { email, password } = req.body;
    try {
        const user = await User.findOne({
            where: {
                email: email.toLowerCase()
            }
        });

        if (!user) {
            return res.status(400).json({
                message: "Incorrect login details: email",
            });
        }

        const isPasswordValid = await user.verifyPassword(password);
        if (!isPasswordValid) {
            return res.json({
                message: "Incorrect login details: password",
            });
        }

        const userToken = user.generateToken();

        return res.json({
            message: "Successfully logged in",
            data: {
                ...user.dataValues,
                token: userToken
            }
        });
    } catch (error) {
        return res.status(500).send({ message: "Internal server error", error });
    }
};

const deleteUser = async (req, res) => {
    const id = req.params.id;
    try {
        const user = await User.findOne({
            where: {
                id
            }
        });

        if (!user) {
            return res.status(400).json({
                message: "Cannot delete user that does not exist",
            });
        }

        const result = await User.destroy({
            where: {
                id
            }
        });

        if (result > 0) {
            return res.json({
                message: "Successfully deleted user",
                data: {
                    email: user.email,
                }
            });
        }
    } catch (error) {
        return res.status(500).send({ message: "Internal server error", error });
    }
}

module.exports = { login, register, deleteUser };
